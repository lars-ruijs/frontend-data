// Bundle file generated by Vizhub.com

(function (d3) {
    'use strict';
  
    //Import select and arc as a module from D3.js, so you can use select() in stead of d3.select()
  
    //Select the svg-element that's in index.html
    const svg = d3.select('svg');
  
    const height = parseFloat(svg.attr('height'));
    const width = parseFloat(svg.attr('width'));
  
    const g = svg.append('g')
        .attr('transform', `translate(${width / 2}, ${height / 2})`);
  
    //Add a <circle> element inside the svg-element
    const circle = g.append('circle')
      .attr('r',  height/2)
      .attr('fill', 'yellow')
      .attr('stroke', 'black');
  
    const eyeSpacing = 100;
    const eyeYOffset = -70;
    const eyeRadius = 30;
    const eyebrowWidth = 80;
    const eyebrowHeight = 20;
  
    const eyesG = g.append('g')
        .attr('transform', `translate(0, ${eyeYOffset})`);
  
    const eyeBrowsG = eyesG.append('g')
            .attr('transform', `translate(0, ${eyeYOffset})`);
  
    eyeBrowsG
        .transition().duration(2000)
            .attr('transform', `translate(0, ${eyeYOffset - 50})`)
        .transition().duration(2000)
            .attr('transform', `translate(0, ${eyeYOffset})`);
  
    const leftEye = svg.append('circle')
      .attr('r',  eyeRadius)
      .attr('cx', width/2 - eyeSpacing)
      .attr('cy', height/2 + eyeYOffset)
      .attr('fill', 'black');
  
    const rightEye = svg.append('circle')
      .attr('r',  eyeRadius)
      .attr('cx', width/2 + eyeSpacing)
      .attr('cy', height/2 + eyeYOffset)
      .attr('fill', 'black');
  
    const rightEyebrow = eyeBrowsG.append('rect')
        .attr('x', +eyeSpacing - eyebrowWidth/2)
        .attr('width', eyebrowWidth)
        .attr('height', eyebrowHeight);
  
    const leftEyebrow = eyeBrowsG.append('rect')
        .attr('x', -eyeSpacing - eyebrowWidth/2)
        .attr('width', eyebrowWidth)
        .attr('height', eyebrowHeight);
  
    const mouth = g.append('path')
            .attr('d', d3.arc()({
                innerRadius: 0,
                outerRadius: 130,
                startAngle: Math.PI / 2,
                endAngle: Math.PI* 3/2
        }));
  
  }(d3));
